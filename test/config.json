{
	"sqls": {
		"count_user": "SELECT COUNT(*) FROM users",
		"get_user_by_id": "SELECT * FROM users WHERE id = ${user_id}",
		"get_user_paginated": {
			"main": {
				"sql": "SELECT * FROM users LIMIT ${limit} OFFSET ${offset}",
				"params": {
					"limit": 10,
					"offset": 0
				}
			}
		},
		"insert_user": {
			"main": {
				"sql": "INSERT INTO users (username, password) VALUES ('${username}', '${password}')",
				"params": {
					"password": "123456"
				}
			}
		},
		"get_height_more_than_avg": {
			"main": "SELECT player_name, height, team_id FROM player AS a WHERE height > (@get_avg_height())",
			"get_avg_height": "SELECT avg(height) FROM player AS b WHERE a.team_id = b.team_id"
		},
		"sub_sql_param": {
			"main": "main: (@level1(param = param))",
			"level1": "level1: ${param}"
		},
		"deep_param": {
			"main": "main: (@level1(param = param))",
			"level1": "level1: (@level2(param = param))",
			"level2": "level2: ${param}"
		},
		"ignore_param": {
			"main": "main: (@level1(param))",
			"level1": "level1: (@level2(param))",
			"level2": "level2: ${param}"
		},
		"object_param": {
			"main": {
				"sql": "UPDATE users SET address = '${address.province}省${address.city}市' WHERE id = ${id}",
				"params": {
					"id": 1,
				}
			}
		},
		"array_param": {
			"main": {
				"sql": "UPDATE users SET address = '${address[0]}省${address[1]}市' WHERE id = ${id}",
				"params": {
					"id": 1,
				}
			}
		},
		"array_object_param": {
			"main": "INSERT INTO users (name, address) VALUES (@user_value(user = users[0])), (@user_value(user = users[1]))",
			"user_value": "'${user.name}', '${user.address.province}省${user.address.city}市'"
		},
		"array_object_param_with_array_param": {
			"main": {
				"sql": "INSERT INTO users (name, address) VALUES (@user_value(user = users[id[0]])), (@user_value(user = users[id[1]]))",
				"params": {
					"id" : [1, 0]
				}
			},
			"user_value": "'${user.name}', '${user['address'][0]}省${user.address[1]}市'"
		},
		"if_else_test": {
			"main": {
				"sql": "SELECT * FROM blog WHERE state = 'ACTIVE' @if(title != null) AND title LIKE '%${title}%' @elif(author and author.name) AND author_name LIKE '%${author.name}%' @else AND 1 = 1 @endif",
				"params": {
					// "title": "标题",
					"author": {
						"name": "张三"
					}
				}
			}
		},
		"for_test": {
			"main": {
				"sql": "INSERT INTO users (id, name, address) VALUES @for((user, index) in users, separator=',') (${index}, '${user.name}', '${user.address.province}-${user.address.city}') @endfor",
				"params": {
					"users": {
						"a": {"name": "张三", "address": {"province": "上海", "city": "上海市"}},
						"b": {"name": "李四", "address": {"province": "北京", "city": "北京市"}},
					}
				}
			}
		},
		"for_test2": {
			"main": {
				"sql": "SELECT * FROM users WHERE id IN (@for(id in ids, separator=',') ${id} @endfor)",
				"params": {
					"ids": [1, 2, 3, 4, 5]
				}
			}
		},
        "get_menu_with_submenu": {
            "main": "WITH RECURSIVE menu_tree AS (@recursive_query(id=menu_id)) SELECT * FROM menu_tree",
            "recursive_query": {
				"sql": "@root_node(id, column_names) UNION ALL @child_nodes(column_names)",
				"params": {
					"column_names": ["id", "parent_id"]
				}
			},
            "root_node": "SELECT @for(column_name in column_names, separator=',') ${column_name} @endfor FROM menu WHERE id=${id}",
            "child_nodes": "SELECT @for(column_name in column_names, separator=',') m.${column_name} @endfor FROM menu m INNER JOIN menu_tree mt ON m.parent_id = mt.id",
		}
	}
}

// vim: wrap 
